precision mediump float;    
varying vec3 vNormal;
varying vec3 vertPos;

const vec3 lightPos = vec3(20.0, -20.0, 0.0);
const vec3 ambientColor = vec3(0.0, 0.0, 0.0);
const vec3 diffuseColor = vec3(.2, .2, .0);
const vec3 specColor = vec3(1.0, 1.0, 1.0);
const float shininess = 16.0;

uniform samplerCube texCube;

void main()                 
{                           
    vec3 normal = normalize(vNormal);
    vec3 lightDir = normalize(lightPos - vertPos);
    float lambertian = max(dot(lightDir, normal), 0.0);
    float specular = 0.0;
    
    if(lambertian > 0.0) {
        vec3 viewDir = normalize(-vertPos);
        vec3 halfDir = normalize(lightDir + viewDir);
        float specAngle = max(dot(halfDir, normal), 0.0);
        specular = pow(specAngle, shininess);
    }
    vec3 lightingColor = ambientColor + lambertian * diffuseColor + specular * specColor;
    
    vec3 lookup = reflect(vec3(0.0, 0.0, 1.0), normal);
    vec4 sampledColor = textureCube(texCube, -lookup);
    
    gl_FragColor = sampledColor + vec4(lightingColor, 1.0);      
}                           